// Simplified chatbot routes for reliable deployment
const express = require('express');
const router = express.Router();

// Import with error handling
let chatbotService;
try {
    chatbotService = require('../services/chatbot');
} catch (error) {
    console.error('Failed to load chatbot service:', error.message);
    chatbotService = null;
}

// Fallback drug database khi Google Sheets kh√¥ng available
const fallbackDrugs = {
    'tigecyclin': {
        name: 'Tigecyclin',
        contraindications: `CH·ªêNG CH·ªà ƒê·ªäNH:
‚Ä¢ D·ªã ·ª©ng v·ªõi tigecyclin ho·∫∑c b·∫•t k·ª≥ th√†nh ph·∫ßn n√†o trong thu·ªëc
‚Ä¢ Tr·∫ª em d∆∞·ªõi 8 tu·ªïi (tr·ª´ tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát)
‚Ä¢ Ph·ª• n·ªØ c√≥ thai v√† cho con b√∫ (tr·ª´ khi l·ª£i √≠ch v∆∞·ª£t tr·ªôi r·ªßi ro)
‚Ä¢ B·ªánh nh√¢n c√≥ ti·ªÅn s·ª≠ d·ªã ·ª©ng v·ªõi tetracycline

TH·∫¨N TR·ªåNG:
‚Ä¢ Gi·∫£m li·ªÅu ·ªü b·ªánh nh√¢n suy gan n·∫∑ng
‚Ä¢ Theo d√µi ch·ª©c nƒÉng gan trong qu√° tr√¨nh ƒëi·ªÅu tr·ªã
‚Ä¢ C√≥ th·ªÉ g√¢y bu·ªìn n√¥n, n√¥n - c·∫ßn theo d√µi t√¨nh tr·∫°ng dinh d∆∞·ª°ng
‚Ä¢ Nguy c∆° nhi·ªÖm tr√πng th·ª© ph√°t do Clostridium difficile`,
        dosage: `LI·ªÄU D√ôNG:
‚Ä¢ Ng∆∞·ªùi l·ªõn: Li·ªÅu t·∫£i 100mg, sau ƒë√≥ 50mg m·ªói 12 gi·ªù qua ƒë∆∞·ªùng tƒ©nh m·∫°ch
‚Ä¢ Tr·∫ª em ‚â•8 tu·ªïi: 1.2mg/kg m·ªói 12 gi·ªù (t·ªëi ƒëa 50mg/li·ªÅu)
‚Ä¢ ƒêi·ªÅu ch·ªânh li·ªÅu ·ªü suy gan: Gi·∫£m 50% li·ªÅu duy tr√¨ ·ªü suy gan n·∫∑ng`,
        indications: `CH·ªà ƒê·ªäNH:
‚Ä¢ Nhi·ªÖm khu·∫©n da v√† m√¥ m·ªÅm ph·ª©c t·∫°p
‚Ä¢ Nhi·ªÖm khu·∫©n ·ªï b·ª•ng ph·ª©c t·∫°p
‚Ä¢ Vi√™m ph·ªïi m·∫Øc ph·∫£i t·∫°i c·ªông ƒë·ªìng
‚Ä¢ Nhi·ªÖm khu·∫©n do vi khu·∫©n ƒëa kh√°ng thu·ªëc`
    },
    'paracetamol': {
        name: 'Paracetamol',
        contraindications: `CH·ªêNG CH·ªà ƒê·ªäNH:
‚Ä¢ D·ªã ·ª©ng v·ªõi paracetamol
‚Ä¢ Suy gan n·∫∑ng
‚Ä¢ Thi·∫øu h·ª•t enzyme G6PD n·∫∑ng`,
        dosage: `LI·ªÄU D√ôNG:
‚Ä¢ Tr·∫ª em: 10-15mg/kg/l·∫ßn, 4-6 gi·ªù/l·∫ßn
‚Ä¢ Ng∆∞·ªùi l·ªõn: 500-1000mg/l·∫ßn, t·ªëi ƒëa 4g/ng√†y`,
        indications: `CH·ªà ƒê·ªäNH:
‚Ä¢ H·∫° s·ªët
‚Ä¢ Gi·∫£m ƒëau nh·∫π ƒë·∫øn trung b√¨nh`
    },
    'ibuprofen': {
        name: 'Ibuprofen', 
        contraindications: `CH·ªêNG CH·ªà ƒê·ªäNH:
‚Ä¢ D·ªã ·ª©ng v·ªõi ibuprofen ho·∫∑c NSAID kh√°c
‚Ä¢ Lo√©t d·∫° d√†y t√° tr√†ng ƒëang ho·∫°t ƒë·ªông
‚Ä¢ Suy tim n·∫∑ng
‚Ä¢ Suy th·∫≠n n·∫∑ng
‚Ä¢ Tam c√° nguy·ªát cu·ªëi c·ªßa thai k·ª≥`,
        dosage: `LI·ªÄU D√ôNG:
‚Ä¢ Tr·∫ª em: 20-30mg/kg/ng√†y chia 3-4 l·∫ßn
‚Ä¢ Ng∆∞·ªùi l·ªõn: 1200-1800mg/ng√†y chia 3-4 l·∫ßn`,
        indications: `CH·ªà ƒê·ªäNH:
‚Ä¢ H·∫° s·ªët, gi·∫£m ƒëau
‚Ä¢ Vi√™m kh·ªõp
‚Ä¢ ƒêau do vi√™m`
    }
};

// Basic rate limiting using express-rate-limit directly
const rateLimit = require('express-rate-limit');
const chatRateLimit = rateLimit({
    windowMs: 1 * 60 * 1000, // 1 minute
    max: 10, // Max 10 requests per minute per IP
    message: { 
        success: false, 
        message: 'Qu√° nhi·ªÅu c√¢u h·ªèi. Vui l√≤ng ƒë·ª£i 1 ph√∫t tr∆∞·ªõc khi h·ªèi ti·∫øp.' 
    },
    standardHeaders: true,
    legacyHeaders: false
});

// Health check for chatbot
router.get('/health', (req, res) => {
    res.json({
        success: true,
        data: {
            serviceLoaded: chatbotService !== null,
            isInitialized: chatbotService ? chatbotService.isInitialized : false,
            timestamp: new Date().toISOString()
        }
    });
});

// Chat endpoint with fallback
router.post('/chat', chatRateLimit, async (req, res) => {
    try {
        const { message, userId } = req.body;
        
        // Validate input
        if (!message || typeof message !== 'string' || message.trim().length < 3) {
            return res.status(400).json({
                success: false,
                message: 'Vui l√≤ng nh·∫≠p c√¢u h·ªèi h·ª£p l·ªá (√≠t nh·∫•t 3 k√Ω t·ª±)'
            });
        }
        
        if (message.length > 500) {
            return res.status(400).json({
                success: false,
                message: 'C√¢u h·ªèi qu√° d√†i. Vui l√≤ng nh·∫≠p t·ªëi ƒëa 500 k√Ω t·ª±.'
            });
        }
        
        // Check if chatbot service is available
        if (!chatbotService || !chatbotService.isInitialized) {
            console.log('üîÑ Chatbot service not available, using fallback database');
            
            // Use fallback drug database
            const normalizedMessage = message.toLowerCase().trim();
            let response = null;
            
            // Search in fallback database
            for (const [drugKey, drugInfo] of Object.entries(fallbackDrugs)) {
                if (normalizedMessage.includes(drugKey) || normalizedMessage.includes(drugInfo.name.toLowerCase())) {
                    console.log(`‚úÖ Found ${drugInfo.name} in fallback database`);
                    
                    let responseText = `Th√¥ng tin v·ªÅ **${drugInfo.name}**:\n\n`;
                    
                    // Check what user is asking for
                    if (normalizedMessage.includes('ch·ªëng ch·ªâ ƒë·ªãnh') || normalizedMessage.includes('contraindication') || normalizedMessage.includes('ki√™ng k·ªµ')) {
                        responseText += drugInfo.contraindications;
                    } else if (normalizedMessage.includes('li·ªÅu') || normalizedMessage.includes('dose') || normalizedMessage.includes('d√πng')) {
                        responseText += drugInfo.dosage;
                    } else if (normalizedMessage.includes('c√¥ng d·ª•ng') || normalizedMessage.includes('ch·ªâ ƒë·ªãnh') || normalizedMessage.includes('indication')) {
                        responseText += drugInfo.indications;
                    } else {
                        // Provide comprehensive info
                        responseText += drugInfo.indications + '\n\n' + drugInfo.dosage + '\n\n' + drugInfo.contraindications;
                    }
                    
                    responseText += '\n\n‚ö†Ô∏è **L∆∞u √Ω quan tr·ªçng**: Th√¥ng tin n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Vui l√≤ng tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ho·∫∑c d∆∞·ª£c sƒ© tr∆∞·ªõc khi s·ª≠ d·ª•ng thu·ªëc.';
                    
                    response = {
                        success: true,
                        data: {
                            message: responseText,
                            sources: [{
                                title: drugInfo.name,
                                source: 'PedMed Knowledge Base',
                                confidence: 90
                            }],
                            isAiGenerated: false,
                            model: 'Fallback Database'
                        }
                    };
                    break;
                }
            }
            
            // If no specific drug found, provide general response
            if (!response) {
                response = {
                    success: true,
                    data: {
                        message: `Xin l·ªói, t√¥i ƒëang t·∫°m th·ªùi kh√¥ng th·ªÉ truy c·∫≠p ƒë∆∞·ª£c c∆° s·ªü d·ªØ li·ªáu thu·ªëc ƒë·∫ßy ƒë·ªß. 

Hi·ªán t·∫°i t√¥i c√≥ th·ªÉ cung c·∫•p th√¥ng tin v·ªÅ m·ªôt s·ªë thu·ªëc ph·ªï bi·∫øn nh∆∞:
‚Ä¢ **Tigecyclin** - kh√°ng sinh ƒëa nƒÉng
‚Ä¢ **Paracetamol** - h·∫° s·ªët, gi·∫£m ƒëau  
‚Ä¢ **Ibuprofen** - ch·ªëng vi√™m, gi·∫£m ƒëau

B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ: "Ch·ªëng ch·ªâ ƒë·ªãnh c·ªßa tigecyclin?" ho·∫∑c "Li·ªÅu paracetamol cho tr·∫ª em?"

ƒê·ªÉ c√≥ th√¥ng tin ƒë·∫ßy ƒë·ªß v√† ch√≠nh x√°c nh·∫•t, vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng t√¨m ki·∫øm thu·ªëc ·ªü trang ch√≠nh ho·∫∑c tham kh·∫£o √Ω ki·∫øn b√°c sƒ©/d∆∞·ª£c sƒ©.`,
                        sources: [],
                        isAiGenerated: false,
                        model: 'Fallback System'
                    }
                };
            }
            
            return res.json(response);
        }
        
        // Process chat request
        const response = await chatbotService.chat(message, userId || 'anonymous');
        res.json(response);
        
    } catch (error) {
        console.error('Chat endpoint error:', error);
        res.status(500).json({
            success: false,
            message: 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.'
        });
    }
});

// Status endpoint
router.get('/status', (req, res) => {
    try {
        if (!chatbotService) {
            return res.json({
                success: false,
                message: 'Chatbot service not loaded'
            });
        }
        
        res.json({
            success: true,
            data: {
                documentsCount: chatbotService.documents ? chatbotService.documents.length : 0,
                isInitialized: chatbotService.isInitialized,
                lastUpdated: new Date().toISOString()
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            message: 'Error getting status: ' + error.message
        });
    }
});

// Fallback suggestions endpoint
router.get('/suggestions', (req, res) => {
    res.json({
        success: true,
        data: [
            "Li·ªÅu paracetamol cho tr·∫ª 2 tu·ªïi?",
            "T√°c d·ª•ng ph·ª• c·ªßa amoxicillin?", 
            "Khi n√†o d√πng ibuprofen?",
            "Thu·ªëc ho cho tr·∫ª nh·ªè?",
            "B·ªï sung vitamin D nh∆∞ th·∫ø n√†o?"
        ]
    });
});

module.exports = router;

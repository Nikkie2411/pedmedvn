// Google Gemini AI Chatbot Service v·ªõi drug data t·ª´ Google Sheets
const { GoogleGenerativeAI } = require('@google/generative-ai');
const { searchDrugData, loadDrugData } = require('./drugSheets');

class GeminiChatbotService {
    constructor() {
        this.documents = [];
        this.isInitialized = false;
        this.knownDrugs = new Set();
        this.dailyRequestCount = 0; // Track daily requests
        this.quotaExceeded = false; // Track quota status
        
        // Initialize Gemini AI
        this.geminiApiKey = process.env.GEMINI_API_KEY; // Mi·ªÖn ph√≠ t·∫°i ai.google.dev
        if (this.geminiApiKey) {
            this.genAI = new GoogleGenerativeAI(this.geminiApiKey);
            this.model = this.genAI.getGenerativeModel({ model: "gemini-1.5-flash" }); // Mi·ªÖn ph√≠
            console.log('‚úÖ Gemini AI initialized with API key found:', this.geminiApiKey ? 'Yes' : 'No');
        } else {
            console.warn('‚ö†Ô∏è Gemini API key not found. Set GEMINI_API_KEY in environment variables.');
        }
    }

    // Initialize v·ªõi Google Sheets drug data
    async initialize() {
        try {
            console.log('ü§ñ Initializing Gemini AI chatbot service with drug data from Google Sheets...');
            
            // Load drug database from Google Sheets
            await this.loadDrugDataFromSheets();
            console.log(`üíä Loaded ${this.documents.length} drugs from Google Sheets`);
            
            if (this.documents.length === 0) {
                console.warn('‚ö†Ô∏è No drug data found in Google Sheets');
                throw new Error('No drug data available. Please add drug information to the Google Sheets.');
            }
            
            this.extractDrugNames();
            this.isInitialized = true;
            
            console.log(`‚úÖ Gemini AI chatbot initialized with ${this.documents.length} drugs`);
            console.log(`üíä Known drugs: ${Array.from(this.knownDrugs).slice(0, 5).join(', ')}...`);
            
        } catch (error) {
            console.error('‚ùå Failed to initialize Gemini AI chatbot:', error);
            throw error;
        }
    }

    // Load drug data t·ª´ Google Sheets
    async loadDrugDataFromSheets() {
        try {
            const drugData = await loadDrugData('pedmedvnch'); // T√™n sheet ch·ª©a d·ªØ li·ªáu thu·ªëc
            
            console.log(`üíä Found ${drugData.length} drugs in Google Sheets`);
            
            this.documents = [];
            
            drugData.forEach((drug, index) => {
                // Create a document structure from drug data
                const doc = {
                    id: drug.id,
                    title: drug.name,
                    content: drug.structuredContent,
                    source: drug.source,
                    lastUpdated: drug.lastUpdated,
                    type: drug.type,
                    rawData: drug.originalData // Keep original sheet data for reference
                };
                
                this.documents.push(doc);
                console.log(`üíä Processed: ${drug.name} (${drug.structuredContent.length} characters)`);
            });
            
        } catch (error) {
            console.error('‚ùå Error loading drug data from Google Sheets:', error);
            throw error;
        }
    }

    // Extract drug names t·ª´ database
    extractDrugNames() {
        this.knownDrugs.clear();
        
        this.documents.forEach(doc => {
            // Extract from title (drug name)
            if (doc.title) {
                this.knownDrugs.add(doc.title.toLowerCase());
                
                // Also add individual words from drug name
                const drugWords = doc.title.split(/\s+/);
                drugWords.forEach(word => {
                    if (word.length > 3) {
                        this.knownDrugs.add(word.toLowerCase());
                    }
                });
            }
            
            // Extract from raw data if available
            if (doc.rawData) {
                const altNames = doc.rawData['T√™n kh√°c'] || doc.rawData['Alternative Names'] || '';
                if (altNames) {
                    altNames.split(/[,;]/).forEach(name => {
                        if (name.trim().length > 3) {
                            this.knownDrugs.add(name.trim().toLowerCase());
                        }
                    });
                }
            }
        });
        
        console.log(`üíä Extracted ${this.knownDrugs.size} known drug names`);
    }

    // Validate n·∫øu c√¢u h·ªèi v·ªÅ thu·ªëc c√≥ trong database
    validateDrugQuery(query) {
        if (!query || query.length < 3) {
            return { 
                isValid: false, 
                reason: 'query_too_short',
                message: 'Vui l√≤ng nh·∫≠p c√¢u h·ªèi d√†i h∆°n 3 k√Ω t·ª±.'
            };
        }

        const queryLower = query.toLowerCase();
        const mentionedDrugs = [];

        // Check if query mentions any known drugs
        for (const drug of this.knownDrugs) {
            if (queryLower.includes(drug)) {
                mentionedDrugs.push(drug);
            }
        }

        // If no known drugs mentioned, check for general medical terms
        const medicalTerms = [
            'thu·ªëc', 'medication', 'medicine', 'drug', 'treatment', 'li·ªÅu', 'dose', 'dosage',
            't√°c d·ª•ng', 'effect', 'side effect', 'ph·∫£n ·ª©ng', 'ch·ªëng ch·ªâ ƒë·ªãnh', 'contraindication',
            'u·ªëng', 'take', 's·ª≠ d·ª•ng', 'use', 'c√°ch d√πng', 'how to use', 'b·∫£o qu·∫£n', 'storage',
            // B·ªï sung th√™m t·ª´ kh√≥a t·ª´ headers m·ªõi
            's∆° sinh', 'tr·∫ª em', 'th·∫≠n', 'gan', 'qu√° li·ªÅu', 'theo d√µi', 'b·∫£o hi·ªÉm', 'y t·∫ø',
            't∆∞∆°ng t√°c', 'c√°ch d√πng', 'ƒëi·ªÅu tr·ªã', 'thanh to√°n', 'ch·ª©c nƒÉng', 'hi·ªáu ch·ªânh',
            'mong mu·ªën', 'th·∫≠n tr·ªçng', 'kh√¥ng mong mu·ªën', 'th√¥ng th∆∞·ªùng'
        ];

        const hasMedicalTerms = medicalTerms.some(term => queryLower.includes(term));

        if (mentionedDrugs.length === 0 && !hasMedicalTerms) {
            const knownDrugsList = Array.from(this.knownDrugs)
                .slice(0, 10)
                .map(drug => drug.charAt(0).toUpperCase() + drug.slice(1))
                .join(', ');

            return { 
                isValid: false, 
                reason: 'unknown_drug',
                message: `Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi v·ªÅ c√°c thu·ªëc c√≥ trong c∆° s·ªü d·ªØ li·ªáu. 

M·ªôt s·ªë thu·ªëc t√¥i c√≥ th√¥ng tin: ${knownDrugsList}${this.knownDrugs.size > 10 ? '...' : ''}

Vui l√≤ng h·ªèi v·ªÅ m·ªôt trong nh·ªØng thu·ªëc n√†y ho·∫∑c s·ª≠ d·ª•ng c√°c t·ª´ kh√≥a y t·∫ø nh∆∞ "thu·ªëc", "li·ªÅu d√πng", "t√°c d·ª•ng ph·ª•", v.v.`
            };
        }
        
        return { isValid: true, mentionedDrugs };
    }

    // Search relevant drugs using Google Sheets
    async searchRelevantDrugs(query, limit = 3) {
        try {
            // Use the drug search for more accurate results
            const searchResults = await searchDrugData(query, 'pedmedvnch', limit);
            
            if (searchResults.length > 0) {
                console.log(`üîç Found ${searchResults.length} relevant drugs from Sheets`);
                return searchResults.map(result => ({
                    title: result.name,
                    content: result.structuredContent,
                    source: result.source,
                    relevanceScore: result.relevanceScore,
                    rawData: result.originalData
                }));
            }

            // Fallback to local document search if available
            if (this.documents.length === 0) return [];
            
            const queryLower = query.toLowerCase();
            const scores = [];
            
            this.documents.forEach((doc, index) => {
                let score = 0;
                const contentLower = doc.content.toLowerCase();
                const titleLower = (doc.title || '').toLowerCase();
                
                // Drug name exact match (highest priority)
                if (titleLower.includes(queryLower)) score += 100;
                
                // Content exact phrase match
                if (contentLower.includes(queryLower)) score += 50;
                
                // Word-based matching
                const queryWords = queryLower.split(/\s+/);
                queryWords.forEach(word => {
                    if (word.length > 2) {
                        if (titleLower.includes(word)) score += 30;
                        if (contentLower.includes(word)) score += 15;
                    }
                });
                
                if (score > 0) {
                    scores.push({
                        index,
                        score,
                        title: doc.title,
                        content: doc.content,
                        source: doc.source
                    });
                }
            });
            
            return scores
                .sort((a, b) => b.score - a.score)
                .slice(0, limit);
                
        } catch (error) {
            console.error('‚ùå Error searching relevant drugs:', error);
            return [];
        }
    }

    // Main chat function v·ªõi Gemini AI
    async chat(message, userId = 'anonymous') {
        try {
            if (!this.isInitialized) {
                await this.initialize();
            }

            if (!this.geminiApiKey || !this.model) {
                return {
                    success: false,
                    message: 'Gemini AI ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng th√™m GEMINI_API_KEY v√†o environment variables.'
                };
            }

            console.log(`ü§ñ Gemini AI request from ${userId}: "${message}"`);
            
            // Validate drug-related query
            const validation = this.validateDrugQuery(message);
            if (!validation.isValid) {
                return {
                    success: true,
                    data: {
                        message: validation.message,
                        isAiGenerated: false
                    }
                };
            }
            
            const startTime = Date.now();
            
            // Search relevant drugs from Google Sheets
            const relevantDrugs = await this.searchRelevantDrugs(message);
            
            if (relevantDrugs.length === 0) {
                return {
                    success: true,
                    data: {
                        message: "Kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan v·ªÅ thu·ªëc trong c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n thu·ªëc ho·∫∑c t·ª´ kh√≥a.",
                        isAiGenerated: false
                    }
                };
            }
            
            // Prepare context for Gemini from Google Sheets drug data v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
            const context = relevantDrugs.map(drug => {
                const data = drug.rawData || drug.originalData || {};
                
                // X√¢y d·ª±ng th√¥ng tin chi ti·∫øt t·ª´ t·∫•t c·∫£ c√°c c·ªôt
                const drugInfo = [
                    `=== ${drug.title.toUpperCase()} ===`,
                    data['Ho·∫°t ch·∫•t'] ? `üî¨ Ho·∫°t ch·∫•t: ${data['Ho·∫°t ch·∫•t']}` : '',
                    data['Ph√¢n lo·∫°i d∆∞·ª£c l√Ω'] ? `üìã Ph√¢n lo·∫°i d∆∞·ª£c l√Ω: ${data['Ph√¢n lo·∫°i d∆∞·ª£c l√Ω']}` : '',
                    '',
                    'üíä LI·ªÄU D√ôNG:',
                    data['Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª s∆° sinh'] ? `üë∂ Tr·∫ª s∆° sinh: ${data['Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª s∆° sinh']}` : '',
                    data['Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª em'] ? `üßí Tr·∫ª em: ${data['Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª em']}` : '',
                    '',
                    '‚öïÔ∏è HI·ªÜU CH·ªàNH LI·ªÄU:',
                    data['Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng th·∫≠n'] ? `ü´ò Ch·ª©c nƒÉng th·∫≠n: ${data['Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng th·∫≠n']}` : '',
                    data['Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng gan'] ? `ü´Ä Ch·ª©c nƒÉng gan: ${data['Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng gan']}` : '',
                    '',
                    data['Ch·ªëng ch·ªâ ƒë·ªãnh'] ? `üö´ CH·ªêNG CH·ªà ƒê·ªäNH: ${data['Ch·ªëng ch·ªâ ƒë·ªãnh']}` : '',
                    data['T√°c d·ª•ng kh√¥ng mong mu·ªën'] ? `‚ö†Ô∏è T√ÅC D·ª§NG KH√îNG MONG MU·ªêN: ${data['T√°c d·ª•ng kh√¥ng mong mu·ªën']}` : '',
                    data['C√°ch d√πng (ngo√†i IV)'] ? `üíâ C√ÅCH D√ôNG: ${data['C√°ch d√πng (ngo√†i IV)']}` : '',
                    data['T∆∞∆°ng t√°c thu·ªëc ch·ªëng ch·ªâ ƒë·ªãnh'] ? `‚ö° T∆Ø∆†NG T√ÅC THU·ªêC: ${data['T∆∞∆°ng t√°c thu·ªëc ch·ªëng ch·ªâ ƒë·ªãnh']}` : '',
                    data['Ng·ªô ƒë·ªôc/Qu√° li·ªÅu'] ? `üÜò NG·ªò ƒê·ªòC/QU√Å LI·ªÄU: ${data['Ng·ªô ƒë·ªôc/Qu√° li·ªÅu']}` : '',
                    data['C√°c th√¥ng s·ªë c·∫ßn theo d√µi'] ? `üìä THEO D√ïI: ${data['C√°c th√¥ng s·ªë c·∫ßn theo d√µi']}` : '',
                    data['B·∫£o hi·ªÉm y t·∫ø thanh to√°n'] ? `üí≥ B·∫¢O HI·ªÇM Y T·∫æ: ${data['B·∫£o hi·ªÉm y t·∫ø thanh to√°n']}` : '',
                    data['C·∫≠p nh·∫≠t'] ? `üìÖ C·∫≠p nh·∫≠t: ${data['C·∫≠p nh·∫≠t']}` : '',
                    `üìç Ngu·ªìn: ${drug.source}`,
                    `üìà ƒê·ªô li√™n quan: ${drug.relevanceScore || 'N/A'}`
                ].filter(line => line.trim()).join('\n');
                
                return drugInfo;
            }).join('\n\n' + '='.repeat(80) + '\n\n');
            
            // Create enhanced prompt for Gemini with drug data
            const prompt = `B·∫°n l√† m·ªôt d∆∞·ª£c sƒ© chuy√™n nghi·ªáp h·ªó tr·ª£ t∆∞ v·∫•n th√¥ng tin v·ªÅ thu·ªëc. H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a CH√çNH X√ÅC tr√™n th√¥ng tin thu·ªëc ƒë∆∞·ª£c cung c·∫•p t·ª´ c∆° s·ªü d·ªØ li·ªáu.

QUAN TR·ªåNG:
- Ch·ªâ s·ª≠ d·ª•ng th√¥ng tin t·ª´ c∆° s·ªü d·ªØ li·ªáu thu·ªëc ƒë∆∞·ª£c cung c·∫•p
- Kh√¥ng b·ªãa ƒë·∫∑t th√¥ng tin v·ªÅ thu·ªëc
- Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát chuy√™n nghi·ªáp
- N·∫øu kh√¥ng c√≥ ƒë·ªß th√¥ng tin, h√£y n√≥i r√µ v√† khuy√™n b·∫°n tham kh·∫£o b√°c sƒ©/d∆∞·ª£c sƒ©
- Lu√¥n nh·∫•n m·∫°nh t·∫ßm quan tr·ªçng c·ªßa vi·ªác tham kh·∫£o chuy√™n gia y t·∫ø
- N·ªôi dung HTML ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh vƒÉn b·∫£n thu·∫ßn

C∆† S·ªû D·ªÆ LI·ªÜU THU·ªêC:
${context}

C√ÇU H·ªéI: ${message}

H√£y tr·∫£ l·ªùi m·ªôt c√°ch chi ti·∫øt, ch√≠nh x√°c v√† an to√†n. Lu√¥n k·∫øt th√∫c b·∫±ng l·ªùi khuy√™n tham kh·∫£o b√°c sƒ©/d∆∞·ª£c sƒ©:`;

            // Call Gemini AI
            const result = await this.model.generateContent(prompt);
            const response = await result.response;
            const aiAnswer = response.text();
            
            const responseTime = Date.now() - startTime;
            
            // Log interaction
            await this.logChatInteraction(userId, message, aiAnswer, responseTime);
            
            console.log(`‚úÖ Gemini AI response generated in ${responseTime}ms`);
            
                return {
                success: true,
                data: {
                    message: aiAnswer,
                    isAiGenerated: true,
                    model: 'Gemini 1.5 Flash',
                    responseTime: responseTime,
                    relevantDrugs: relevantDrugs.length,
                    sources: relevantDrugs.map(d => ({
                        title: d.name || d.title || 'Unknown drug',
                        source: d.source || 'Google Sheets',
                        confidence: 95 // High confidence since it's from our drug database
                    }))
                }
            };        } catch (error) {
            console.error('‚ùå Gemini AI chat error:', error);
            
            // Check if it's a quota exceeded error
            if (error.message.includes('429') || error.message.includes('quota') || error.message.includes('Too Many Requests')) {
                console.warn('‚ö†Ô∏è Gemini AI quota exceeded. Switching to fallback mode.');
                this.quotaExceeded = true;
                
                // Fallback to simple database response when quota exceeded
                const fallbackResponse = this.generateFallbackResponse(relevantDrugs, message);
                return {
                    success: true,
                    data: {
                        message: fallbackResponse,
                        isAiGenerated: false,
                        model: 'Fallback (Quota exceeded)',
                        note: 'AI ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n mi·ªÖn ph√≠ h√¥m nay (50 c√¢u h·ªèi/ng√†y). ƒê√¢y l√† ph·∫£n h·ªìi t·ª´ c∆° s·ªü d·ªØ li·ªáu thu·ªëc.',
                        relevantDrugs: relevantDrugs.length,
                        sources: relevantDrugs.map(d => ({
                            title: d.name || d.title || 'Unknown drug',
                            source: d.source || 'Google Sheets',
                            confidence: 90
                        }))
                    }
                };
            }
            
            return {
                success: false,
                message: `L·ªói Gemini AI: ${error.message}`
            };
        }
    }

    // Generate fallback response when AI quota exceeded - v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin t·ª´ Google Sheets
    generateFallbackResponse(relevantDrugs, query) {
        if (!relevantDrugs || relevantDrugs.length === 0) {
            return "Xin l·ªói, kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ thu·ªëc b·∫°n h·ªèi trong c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i v·ªõi t√™n thu·ªëc kh√°c.";
        }

        const topDrug = relevantDrugs[0];
        const drugName = topDrug.title || topDrug.name;
        const data = topDrug.rawData || topDrug.originalData || {};
        
        let response = `üìã **TH√îNG TIN THU·ªêC: ${drugName.toUpperCase()}**\n\n`;
        
        // Hi·ªÉn th·ªã t·∫•t c·∫£ th√¥ng tin c√≥ s·∫µn t·ª´ Google Sheets
        if (data['Ho·∫°t ch·∫•t']) {
            response += `üî¨ **Ho·∫°t ch·∫•t:** ${data['Ho·∫°t ch·∫•t']}\n\n`;
        }
        
        if (data['Ph√¢n lo·∫°i d∆∞·ª£c l√Ω']) {
            response += `ÔøΩ **Ph√¢n lo·∫°i d∆∞·ª£c l√Ω:** ${data['Ph√¢n lo·∫°i d∆∞·ª£c l√Ω']}\n\n`;
        }
        
        // Th√¥ng tin li·ªÅu d√πng
        response += `üíä **LI·ªÄU D√ôNG:**\n`;
        if (data['Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª s∆° sinh']) {
            response += `üë∂ **Tr·∫ª s∆° sinh:** ${data['Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª s∆° sinh']}\n`;
        }
        if (data['Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª em']) {
            response += `üßí **Tr·∫ª em:** ${data['Li·ªÅu th√¥ng th∆∞·ªùng tr·∫ª em']}\n`;
        }
        response += '\n';
        
        // Hi·ªáu ch·ªânh li·ªÅu
        response += `‚öïÔ∏è **HI·ªÜU CH·ªàNH LI·ªÄU:**\n`;
        if (data['Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng th·∫≠n']) {
            response += `ü´ò **Ch·ª©c nƒÉng th·∫≠n:** ${data['Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng th·∫≠n']}\n`;
        }
        if (data['Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng gan']) {
            response += `ü´Ä **Ch·ª©c nƒÉng gan:** ${data['Hi·ªáu ch·ªânh li·ªÅu theo ch·ª©c nƒÉng gan']}\n`;
        }
        response += '\n';
        
        // Ch·ªëng ch·ªâ ƒë·ªãnh
        if (data['Ch·ªëng ch·ªâ ƒë·ªãnh']) {
            response += `üö´ **CH·ªêNG CH·ªà ƒê·ªäNH:**\n${data['Ch·ªëng ch·ªâ ƒë·ªãnh']}\n\n`;
        }
        
        // T√°c d·ª•ng kh√¥ng mong mu·ªën
        if (data['T√°c d·ª•ng kh√¥ng mong mu·ªën']) {
            response += `‚ö†Ô∏è **T√ÅC D·ª§NG KH√îNG MONG MU·ªêN:**\n${data['T√°c d·ª•ng kh√¥ng mong mu·ªën']}\n\n`;
        }
        
        // C√°ch d√πng
        if (data['C√°ch d√πng (ngo√†i IV)']) {
            response += `üíâ **C√ÅCH D√ôNG:**\n${data['C√°ch d√πng (ngo√†i IV)']}\n\n`;
        }
        
        // T∆∞∆°ng t√°c thu·ªëc
        if (data['T∆∞∆°ng t√°c thu·ªëc ch·ªëng ch·ªâ ƒë·ªãnh']) {
            response += `‚ö° **T∆Ø∆†NG T√ÅC THU·ªêC CH·ªêNG CH·ªà ƒê·ªäNH:**\n${data['T∆∞∆°ng t√°c thu·ªëc ch·ªëng ch·ªâ ƒë·ªãnh']}\n\n`;
        }
        
        // Ng·ªô ƒë·ªôc/Qu√° li·ªÅu
        if (data['Ng·ªô ƒë·ªôc/Qu√° li·ªÅu']) {
            response += `üÜò **NG·ªò ƒê·ªòC/QU√Å LI·ªÄU:**\n${data['Ng·ªô ƒë·ªôc/Qu√° li·ªÅu']}\n\n`;
        }
        
        // Theo d√µi ƒëi·ªÅu tr·ªã
        if (data['C√°c th√¥ng s·ªë c·∫ßn theo d√µi']) {
            response += `üìä **C√ÅC TH√îNG S·ªê C·∫¶N THEO D√ïI:**\n${data['C√°c th√¥ng s·ªë c·∫ßn theo d√µi']}\n\n`;
        }
        
        // B·∫£o hi·ªÉm y t·∫ø
        if (data['B·∫£o hi·ªÉm y t·∫ø thanh to√°n']) {
            response += `ÔøΩ **B·∫¢O HI·ªÇM Y T·∫æ THANH TO√ÅN:**\n${data['B·∫£o hi·ªÉm y t·∫ø thanh to√°n']}\n\n`;
        }
        
        // Th√¥ng tin c·∫≠p nh·∫≠t
        if (data['C·∫≠p nh·∫≠t']) {
            response += `üìÖ **C·∫≠p nh·∫≠t:** ${data['C·∫≠p nh·∫≠t']}\n\n`;
        }
        
        response += `\nüîç **Ngu·ªìn:** ${topDrug.source || 'Google Sheets Database'}\n`;
        response += `üìà **ƒê·ªô li√™n quan:** ${topDrug.relevanceScore || 90}%\n\n`;
        response += `‚ö†Ô∏è **L∆ØU √ù QUAN TR·ªåNG:** ƒê√¢y l√† th√¥ng tin tham kh·∫£o t·ª´ c∆° s·ªü d·ªØ li·ªáu chuy√™n khoa. Vui l√≤ng tham kh·∫£o b√°c sƒ© ho·∫∑c d∆∞·ª£c sƒ© tr∆∞·ªõc khi s·ª≠ d·ª•ng thu·ªëc.`;
        
        return response;
    }
    
    // Extract specific section from content
    extractSection(content, keywords) {
        const lines = content.split('\n');
        let relevantLines = [];
        let capturing = false;
        
        for (const line of lines) {
            const lineLower = line.toLowerCase();
            
            // Check if this line starts a relevant section
            if (keywords.some(keyword => lineLower.includes(keyword.toLowerCase()))) {
                capturing = true;
                relevantLines.push(line);
                continue;
            }
            
            // If we're capturing and hit another section header, stop
            if (capturing && line.match(/^[0-9]+\.|^[A-Z][^:]*:/) && !keywords.some(k => lineLower.includes(k.toLowerCase()))) {
                break;
            }
            
            // Continue capturing if we're in a relevant section
            if (capturing) {
                relevantLines.push(line);
            }
        }
        
        return relevantLines.length > 1 ? relevantLines.join('\n').trim() : null;
    }

    // Get quota status
    getQuotaStatus() {
        return {
            quotaExceeded: this.quotaExceeded,
            dailyRequestCount: this.dailyRequestCount,
            maxDailyRequests: 50, // Gemini free tier limit
            remaining: Math.max(0, 50 - this.dailyRequestCount)
        };
    }

    // Reset quota (call this daily or when needed)
    resetQuota() {
        this.quotaExceeded = false;
        this.dailyRequestCount = 0;
        console.log('üîÑ Gemini AI quota reset');
    }

    // Log chat interaction
    async logChatInteraction(userId, message, response, responseTime) {
        try {
            const logEntry = {
                timestamp: new Date().toISOString(),
                userId,
                model: 'Gemini',
                message: message.substring(0, 500),
                response: response.substring(0, 1000),
                responseTime,
                success: true
            };
            
            console.log(`üìù Chat logged: ${userId} - ${responseTime}ms`);
        } catch (error) {
            console.error('‚ùå Error logging chat interaction:', error);
        }
    }

    // Add new drug to the knowledge base
    async addDrug(drugData) {
        try {
            // This would typically update the Google Sheet
            // For now, we'll just refresh the cache
            console.log(`‚ûï Adding new drug: ${drugData.name}`);
            
            // Clear cache to force reload
            const { clearDrugCache } = require('./drugSheets');
            clearDrugCache();
            
            // Reinitialize to load new data
            await this.initialize();
            
            return { success: true, message: 'Drug added successfully' };
        } catch (error) {
            console.error('‚ùå Error adding drug:', error);
            return { success: false, message: `Error adding drug: ${error.message}` };
        }
    }

    // Get statistics
    getStats() {
        return {
            totalDrugs: this.documents.length,
            knownDrugNames: this.knownDrugs.size,
            isInitialized: this.isInitialized,
            modelUsed: 'Gemini 1.5 Flash',
            lastInitialized: new Date().toISOString()
        };
    }
}

module.exports = GeminiChatbotService;

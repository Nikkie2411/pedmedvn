// Utility to process Word documents and build knowledge base
const fs = require('fs').promises;
const path = require('path');

class DocumentProcessor {
    constructor() {
        this.documents = [];
        this.supportedExtensions = ['.txt', '.md'];
    }

    // Process text files (since we can't directly read .docx on Render free tier)
    async processTextFile(filePath) {
        try {
            const content = await fs.readFile(filePath, 'utf8');
            const fileName = path.basename(filePath);
            const title = fileName.replace(/\.[^/.]+$/, ""); // Remove extension
            
            // Clean and normalize content
            const cleanContent = this.cleanText(content);
            
            return {
                title,
                content: cleanContent,
                source: fileName,
                processedAt: new Date().toISOString()
            };
        } catch (error) {
            console.error(`‚ùå Error processing file ${filePath}:`, error);
            return null;
        }
    }

    // Clean and normalize Vietnamese text
    cleanText(text) {
        return text
            .replace(/\r\n/g, '\n') // Normalize line breaks
            .replace(/\n{3,}/g, '\n\n') // Remove excessive line breaks
            .replace(/\s{2,}/g, ' ') // Remove excessive spaces
            .replace(/[""]/g, '"') // Normalize quotes
            .replace(/['']/g, "'") // Normalize apostrophes
            .trim();
    }

    // Process directory of documents
    async processDirectory(directoryPath) {
        try {
            const files = await fs.readdir(directoryPath);
            const processedDocs = [];
            
            for (const file of files) {
                const filePath = path.join(directoryPath, file);
                const stat = await fs.stat(filePath);
                
                if (stat.isFile() && this.isSupportedFile(file)) {
                    console.log(`üìÑ Processing: ${file}`);
                    const doc = await this.processTextFile(filePath);
                    if (doc) {
                        processedDocs.push(doc);
                    }
                }
            }
            
            console.log(`‚úÖ Processed ${processedDocs.length} documents`);
            return processedDocs;
            
        } catch (error) {
            console.error('‚ùå Error processing directory:', error);
            return [];
        }
    }

    // Check if file is supported
    isSupportedFile(fileName) {
        const ext = path.extname(fileName).toLowerCase();
        return this.supportedExtensions.includes(ext);
    }

    // Build knowledge base from processed documents
    async buildKnowledgeBase(documentsDirectory, outputPath) {
        try {
            console.log('üî® Building knowledge base...');
            
            // Process all documents in directory
            const documents = await this.processDirectory(documentsDirectory);
            
            if (documents.length === 0) {
                console.log('‚ö†Ô∏è No documents found to process');
                return false;
            }
            
            // Ensure output directory exists
            const outputDir = path.dirname(outputPath);
            await fs.mkdir(outputDir, { recursive: true });
            
            // Save knowledge base
            await fs.writeFile(outputPath, JSON.stringify(documents, null, 2), 'utf8');
            
            console.log(`‚úÖ Knowledge base built with ${documents.length} documents`);
            console.log(`üíæ Saved to: ${outputPath}`);
            
            return true;
            
        } catch (error) {
            console.error('‚ùå Error building knowledge base:', error);
            return false;
        }
    }

    // Add sample medical documents for testing
    async createSampleKnowledgeBase(outputPath) {
        const sampleDocuments = [
            {
                title: "Paracetamol trong nhi khoa",
                content: `Paracetamol (Acetaminophen) l√† thu·ªëc h·∫° s·ªët v√† gi·∫£m ƒëau th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong nhi khoa.

LI·ªÄU L∆Ø·ª¢NG:
- Tr·∫ª s∆° sinh: 10-15 mg/kg/l·∫ßn, c√°ch 4-6 gi·ªù
- Tr·∫ª em: 10-15 mg/kg/l·∫ßn, c√°ch 4-6 gi·ªù  
- Li·ªÅu t·ªëi ƒëa: 90 mg/kg/ng√†y

CH·ªêNG CH·ªà ƒê·ªäNH:
- D·ªã ·ª©ng v·ªõi paracetamol
- Suy gan n·∫∑ng
- Thi·∫øu h·ª•t G6PD n·∫∑ng

T√ÅC D·ª§NG PH·ª§:
- Hi·∫øm g·∫∑p ·ªü li·ªÅu th√¥ng th∆∞·ªùng
- Qu√° li·ªÅu c√≥ th·ªÉ g√¢y ƒë·ªôc gan

C√ÅCH D√ôNG:
- U·ªëng b·∫±ng ƒë∆∞·ªùng mi·ªáng
- C√≥ th·ªÉ cho qua ƒë∆∞·ªùng h·∫≠u m√¥n n·∫øu c·∫ßn
- Kh√¥ng d√πng qu√° 5 ng√†y li√™n t·ª•c`,
                source: "drug_paracetamol.txt",
                processedAt: new Date().toISOString()
            },
            {
                title: "Amoxicillin trong nhi khoa",
                content: `Amoxicillin l√† kh√°ng sinh beta-lactam thu·ªôc nh√≥m penicillin, th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng trong ƒëi·ªÅu tr·ªã nhi·ªÖm khu·∫©n ·ªü tr·∫ª em.

LI·ªÄU L∆Ø·ª¢NG:
- Nhi·ªÖm khu·∫©n nh·∫π ƒë·∫øn v·ª´a: 25-50 mg/kg/ng√†y, chia 2-3 l·∫ßn
- Nhi·ªÖm khu·∫©n n·∫∑ng: 75-100 mg/kg/ng√†y, chia 3 l·∫ßn
- Otitis media: 80-90 mg/kg/ng√†y, chia 2 l·∫ßn

CH·ªêNG CH·ªà ƒê·ªäNH:
- D·ªã ·ª©ng penicillin
- D·ªã ·ª©ng beta-lactam
- Ti·ªÅn s·ª≠ ph·∫£n ·ª©ng qu√° m·∫´n v·ªõi amoxicillin

T√ÅC D·ª§NG PH·ª§:
- Ti√™u ch·∫£y, bu·ªìn n√¥n
- Ph√°t ban da
- Nhi·ªÖm khu·∫©n c∆° h·ªôi (candida)

CH√ö √ù:
- D√πng tr∆∞·ªõc khi ƒÉn ƒë·ªÉ tƒÉng h·∫•p thu
- Ho√†n th√†nh li·ªáu tr√¨nh ƒëi·ªÅu tr·ªã
- Theo d√µi d·∫•u hi·ªáu d·ªã ·ª©ng`,
                source: "drug_amoxicillin.txt",
                processedAt: new Date().toISOString()
            },
            {
                title: "Ibuprofen trong nhi khoa",
                content: `Ibuprofen l√† thu·ªëc ch·ªëng vi√™m kh√¥ng steroid (NSAID) c√≥ t√°c d·ª•ng h·∫° s·ªët, gi·∫£m ƒëau v√† ch·ªëng vi√™m.

LI·ªÄU L∆Ø·ª¢NG:
- H·∫° s·ªët: 5-10 mg/kg/l·∫ßn, c√°ch 6-8 gi·ªù
- Gi·∫£m ƒëau: 4-10 mg/kg/l·∫ßn, c√°ch 6-8 gi·ªù
- Li·ªÅu t·ªëi ƒëa: 40 mg/kg/ng√†y

CH·ªêNG CH·ªà ƒê·ªäNH:
- Tr·∫ª d∆∞·ªõi 6 th√°ng tu·ªïi
- D·ªã ·ª©ng v·ªõi NSAID
- Lo√©t d·∫° d√†y t√° tr√†ng
- Suy th·∫≠n, suy gan n·∫∑ng
- M·∫•t n∆∞·ªõc n·∫∑ng

T√ÅC D·ª§NG PH·ª§:
- ƒêau d·∫° d√†y
- Bu·ªìn n√¥n, n√¥n
- ·∫¢nh h∆∞·ªõng ƒë·∫øn ch·ª©c nƒÉng th·∫≠n
- Ph·∫£n ·ª©ng d·ªã ·ª©ng

CH√ö √ù:
- D√πng sau khi ƒÉn
- ƒê·∫£m b·∫£o tr·∫ª kh√¥ng m·∫•t n∆∞·ªõc
- Kh√¥ng d√πng ƒë·ªìng th·ªùi v·ªõi aspirin`,
                source: "drug_ibuprofen.txt",
                processedAt: new Date().toISOString()
            }
        ];

        try {
            // Ensure output directory exists
            const outputDir = path.dirname(outputPath);
            await fs.mkdir(outputDir, { recursive: true });
            
            await fs.writeFile(outputPath, JSON.stringify(sampleDocuments, null, 2), 'utf8');
            
            console.log('‚úÖ Sample knowledge base created');
            console.log(`üíæ Saved to: ${outputPath}`);
            
            return true;
        } catch (error) {
            console.error('‚ùå Error creating sample knowledge base:', error);
            return false;
        }
    }
}

module.exports = new DocumentProcessor();
